@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model StartWorkoutViewModel
@{
    ViewData["HideNavigation"] = true;
}
@* <input type="hidden" id="trainingStartTime" value="@trainingStartTime" /> *@

<head>
    <script>
        (function () {
            const getCookie = (name) => {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            };

            const userTheme = getCookie("theme");
            if (userTheme === "dark") {
                document.documentElement.classList.add("dark-theme");
            } else {
                document.documentElement.classList.remove("dark-theme");
            }
        })();
    </script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/5.0.8/jquery.inputmask.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/profile.css" asp-append-version="true" />
    <style>
        .exercise-option.selected {
            border: 2px solid #28A745;
            box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4">Начать тренировку</h2>
        <form method="post" asp-page-handler="Save">
            <div class="mb-3 d-flex flex-column">
                <div class="d-flex mb-3">
                    <label class="form-label">
                        Выберите упражнение
                    </label>
                </div>
                <div class="d-flex mb-3">
                    <button class="btn btn-outline-success mb-3 " type="button" data-bs-toggle="collapse" data-bs-target="#exerciseCards" aria-expanded="true" aria-controls="exerciseCards">
                        Показать / Скрыть упражнения
                    </button>
                </div>
                <div class="d-flex mb-3">
                    <input id="exerciseSearch"
                           class="form-control form-control-sm"
                           type="text"
                           placeholder="Поиск упражнения..."
                           style="max-width:300px;" />
                </div>
                <div class="d-flex mb-3">
                    <div class="collapse show" id="exerciseCards">
                        <h5>Выберите упражнение:</h5>
                        <div id="exerciseCard" class="d-flex flex-wrap gap-3">
                            @foreach (var exercise in Model.AvailableExercises)
                            {
                                <div class="exercise-item">
                                    <div class="card exercise-option" data-id="@exercise.Id" data-cal="@exercise.calBurned">
                                        <div class="card-body">
                                            <h5 class="card-title">@exercise.Name</h5>
                                            <p class="card-text text-truncate w-75">@exercise.Description</p>
                                            <input type="hidden" id="SelectedExerciseId" name="SelectedExerciseId" />
                                            <input type="hidden" id="SelectedExerciseName" />
                                            <input type="hidden" id="SelectedExerciseCal" />
                                            <button class="btn btn-outline-primary select-exercise-btn">Выбрать</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <input type="hidden" name="SelectedExerciseId" id="SelectedExerciseId" />
                    </div>
                </div>
                
                <div class="modal fade" id="addExerciseModal" tabindex="-1" aria-labelledby="addExerciseModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                    </div>
                </div>
            </div>

            <button type="button" class="btn btn-secondary mb-3" onclick="addSet()">Добавить подход</button>
            <div class="mega-div mb-4" id="mega-div">
                <div class="exercise-block" data-exercise-id="">
                    <div id="setsContainer" class="mb-4">
                        <!-- Здесь будут появляться добавленные подходы -->

                    </div>
                </div>
            </div>

            @*тут остановился*@
            <div class="d-flex gap-2 mb-3 bp-5">
                <button type="button" class="btn btn-primary" onclick="saveWorkout()">Сохранить тренировку</button>
                <button type="button" class="btn btn-info" onclick="showInstruction()">Инструкция</button>
            </div>

            <div id="instructionArea" class="card">
                <h5>Инструкция</h5>
                <p id="instructionText"></p>
                <a id="instructionLink" href="#" target="_blank" class="btn btn-sm btn-outline-primary mt-2" onclick="showInstruction()">Открыть видео</a>
            </div>
        </form>
    </div>

</body>

<script>
    let setCounter = 0;
    let cals = 0;
    // let startTime = document.getElementById("trainingStartTime").value;
    let startTime;

    document.querySelectorAll('.select-exercise-btn').forEach(btn => {
        btn.addEventListener('click', function (e) {
            e.preventDefault();

            // Удалить выделение
            document.querySelectorAll('.exercise-option').forEach(card => card.classList.remove('selected'));

            // Активная карточка
            const card = this.closest('.exercise-option');
            card.classList.add('selected');

            const selectedId = card.dataset.id;
            const selectedCal = parseFloat(card.dataset.cal) || 0;
            const selectedName = card.querySelector('.card-title').textContent.trim();

            // Сохраняем в скрытые input’ы
            document.getElementById('SelectedExerciseId').value = selectedId;
            document.getElementById('SelectedExerciseName').value = selectedName;
            document.getElementById('SelectedExerciseCal').value = selectedCal;

            console.log('Выбрано:', selectedId, selectedName, selectedCal);
        });
    });

    function addSet() {
        
        if (startTime == null)
            startTime = new Date().toISOString();

        const container = document.getElementById('mega-div');

        const selectedExerciseId = document.getElementById('SelectedExerciseId').value;
        const selectedExerciseName = document.getElementById('SelectedExerciseName').value;
        const selectedCal = parseFloat(document.getElementById('SelectedExerciseCal').value) || 0;
        if (selectedExerciseId == "") return;
        cals += selectedCal;
        setCounter++;
        console.log('Добавляем подход к', selectedExerciseName, 'калории:', selectedCal);

        const html = `
            <div class="exercise-block mb-4 border p-3 rounded" data-exercise-id="${selectedExerciseId}">
                <h5>${selectedExerciseName} — Подход ${setCounter}</h5>
                <div class="set-row mb-3 border p-2 rounded">
                    <div class="row">
                        <div class="col">
                            <label>Повторения</label>
                                <input type="number" name="Sets[${setCounter - 1}].Reps" class="form-control reps-input" required />
                        </div>
                        <div class="col">
                            <label>Вес (кг)</label>
                                <input type="number" name="Sets[${setCounter - 1}].Weight" class="form-control weight-input" step="0.1" required />
                        </div>
                        <div class="col">
                                <input type="hidden" name="Sets[${setCounter - 1}].Calories" class="calories-input" value="${selectedCal}" />
                        </div>
                    </div>
                </div>
            </div>`;
        container.insertAdjacentHTML('beforeend', html);
    }

    function saveWorkout() {
        const workout = {
            StartTime: startTime,
            Exercises: [],
            burnedCals: cals
        };

        console.log("Сохранение тренировки запущено");

        document.querySelectorAll('.exercise-block').forEach(exBlock => {
            const ExerciseId = parseInt(exBlock.dataset.exerciseId, 10);
            const Sets = [];

            exBlock.querySelectorAll('.set-row').forEach(setRow => {
                const Reps = parseInt(setRow.querySelector('.reps-input').value, 10);
                const Weight = parseFloat(setRow.querySelector('.weight-input').value);
                const caloriesInput = setRow.querySelector('.calories-input');
                const calBurned = caloriesInput ? parseFloat(caloriesInput.value) : 0;
                Sets.push({ Reps, Weight, calBurned });
            });

            if (!isNaN(ExerciseId)) {
                workout.Exercises.push({ ExerciseId, Sets });
            }
        });

        if (workout.Exercises.length === 0) {
            console.warn("Тренировка без упражнений! Не засчитано!", workout.Exercises.length);
            Swal.fire({
                icon: 'warning',
                title: 'Провал!',
                html: 'Тренировка без упражнений!<br>Закрытие через <b></b> мс.',
                timer: 1500,
                showConfirmButton: false,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading();
                    const htmlContainer = Swal.getHtmlContainer();
                    const timerEl = htmlContainer && htmlContainer.querySelector('b');
                    timerInterval = setInterval(() => {
                        timerEl.textContent = `${Swal.getTimerLeft()}`;
                    }, 100);
                },
                willClose: () => {
                    clearInterval(timerInterval);
                }
            }).then(() => {
                window.location.reload();
            });

            return;
        }

        console.log("Workout JSON", JSON.stringify(workout, null, 2));

        fetch('/Profile/Save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(workout)
        })
            .then(response => response.json())
            .then(res => {
                console.log("Ответ от сервера:", res);
                if (res.redirectUrl) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Успех!',
                        text: 'Тренировка успешно завершена!',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.href = res.redirectUrl;
                    });
                } else {
                    alert("Произошла ошибка при сохранении.");
                    console.warn("Ответ сервера без redirectUrl:", res);
                }
            })
            .catch(err => {
                console.error("Ошибка запроса:", err);
            });
    }


    function showInstruction() {
        const selectedId = document.getElementById('SelectedExerciseId').value;
        const exercises = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AvailableExercises));
        const selected = exercises.find(e => e.Id == selectedId);

        if (selected) {
            document.getElementById('instructionText').textContent = selected.Description || "Нет описания.";
            const link = document.getElementById('instructionLink');
            link.href = selected.HowToUrl || "#";
            link.style.display = selected.HowToUrl ? "inline-block" : "none";
            document.getElementById('instructionArea').classList.remove("d-none");
        }
    }

</script>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const input = document.getElementById("exerciseSearch");
        const items = document.querySelectorAll(".exercise-item");

        input.addEventListener("input", () => {
            const term = input.value.trim().toLowerCase();

            items.forEach(item => {
                const name = item.querySelector(".card-title")
                    .textContent.toLowerCase();
                const desc = item.querySelector(".card-text")
                    .textContent.toLowerCase();

                // показываем, если совпало в имени или описании
                if (name.includes(term) || desc.includes(term)) {
                    item.style.display = "";
                } else {
                    item.style.display = "none";
                }
            });
        });
    });
</script>